// ==== BUTTONS ==== //

// == LIBRARY == //

// These mixins might one day become a separate library

// General button styling; applies to all buttons
@mixin button-common {
  box-sizing: border-box;
  cursor: pointer;
  display: inline-block;
  outline: 0;
  overflow: visible;
  text-decoration: none;
  text-transform: capitalize;
  transition: all .7s ease-out, background-position .49s ease-out;
  vertical-align: top;
  width: auto;
  &:hover {
    transition: all .23s ease, background-position .11s ease;
  }
  &:focus {
    @include button-focus;
  }
  &.active,
  &:active {
    transition: all .15s ease, background-position .08s ease;
  }
  &:active {
    transform: translateY(1px); // Not applied to the active class; this is meant to be a transient effect only when clicked
  }
  &.disabled, // Emulating `:disabled` button functionality for regular anchor elements
  &:disabled {
    @include button-disabled;
  }
  &::-moz-focus-inner { // Kill phantom spacing and dotted border that appears in Firefox; via Formalize: https://github.com/nathansmith/formalize
    border: 0;
    padding: 0;
  }
}

// Focus button styling
@mixin button-focus {
  outline-width: 0; // Blue border is rather distracting but some sort of indicator might be nice here
}

// Disabled button styling
@mixin button-disabled {
  cursor: not-allowed;
  opacity: .5; // Applies to `button` and `input` elements
  pointer-events: none;
}



// == SHORTCUTS == //

// Round the edges of a button by an arbitrary value
// This will accept a single pixel value or a quoted string e.g. "33%/100%" for a capsule-like rounding effect
@mixin button-rounded( $value: 5px ) {
  border-radius: unquote( $value );
}

// A simple gradient mixin; button states are simulated by sliding this gradient up and down
@mixin button-gradient( $c1: #000, $c2: #fff, $c3: #000 ) {
  background: $c1;
  background-image: linear-gradient( $c1, $c2, $c3, $c1 ); // Repeating gradient for smoother repositioning
  background-position: 0 15%;
  background-size: 1px 350%;
  &:hover {
    background-position: 0 0;
  }
  &.active,
  &:active {
    background-position: 0 -40%;
  }
}

// This isn't extensible but it's easy enough to rewrite
@mixin button-shadow( $shadow: #000, $inset: #000 ) {
  box-shadow: inset 0 1px 2px white(.72), 0 1px 2px $shadow;
  &.active,
  &:active {
    box-shadow: inset 0 1px 3px 0 $inset, 0 1px 1px lighten( $shadow, 9 );
  }
}



// == RECIPES == //

// A capsule-like button design
@mixin button-capsule( $i: 1 ) {
  @include button-common;
  @include button-rounded( "#{spacer(2/3)}/100%" );
  @include button-shadow( colour(shadow-light), colour(shadow-dark) );
  @include font-size(text-smaller, 2);
  @include font-style(button);
  @include rem( padding, 0 spacer(1/3) );
}
@mixin button-capsule-theme( $i: 1 ) {
  @include button-gradient( colour(button#{$i}-bg-1), colour(button#{$i}-bg-2), colour(button#{$i}-bg-3) );
  @include text-shadow-small( colour(button#{$i}-s) );
  @include text-shadow-small-svg( colour(button#{$i}-s) );
  border: 1px solid colour(button#{$i}-b);
  color: colour(button#{$i});
  &:hover {
    color: colour(button#{$i}-h);
  }
  &.active,
  &:active {
    border-color: 1px solid darken( colour(button#{$i}-b), 7 );
    color: colour(button#{$i}-a);
  }
}

// A flat button design
@mixin button-flat {
  @include button-common;
  @include font-size(text-smaller);
  @include font-style(button);
  @include rem( padding, 0 spacer(1/3) );
  border: none;
}
@mixin button-flat-theme( $i: 1 ) {
  background: colour(button#{$i}-bg-1);
  color: colour(button#{$i});
  &:hover {
    background: colour(button#{$i}-bg-2);
    color: colour(button#{$i}-h);
  }
  &.active,
  &:active {
    color: colour(button#{$i}-a);
  }
}



// == LAYOUT == //

// Button group; apply to an element with only buttons as immediate children
@mixin button-group( $float: right, $margin: 8px ) {
  @include rem( margin-left, spacer(1/2) - $margin );
  float: unquote( $float );
  > * {
    @include rem( margin-left, $margin );
    float: unquote( k-opposite( $float ) );
  }
}

// Button merge; apply to a button group to cause buttons to stick together
@mixin button-merge {
  > :not(:first-child):not(:last-child) {
    border-radius: 0;
  }
  > :first-child:not(:only-of-type) {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
  > :last-child:not(:only-of-type) {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
  > :not(:last-child):not(:only-of-type) {
    border-right: 0;
  }
  > * + * {
    margin-left: 0;
  }
}
