// ==== UTILS ==== //

// == TYPE == //

// Font size mixin; $size (valid size from the size map); $offset (integer); pixel value offset to account for borders and other things that disrupt line-height
@mixin font-size( $size: text, $offset: 0, $height: $base-line ) {
  @include rem( font-size, size($size) + 0px );
  @include line-height( size($size), $offset, $height );
}

// Line-height mixin; calculates the target line-height for an object of (int) $size given the global $baseline
@mixin line-height( $size: $base-size, $offset: 0, $height: $base-line, $buffer: 1 ) {

  // Buffer for font sizes larger than the baseline; simply doubles or triples baseline size as needed
  @if $size >= $height * 2 {
    $buffer: 2.5;
  }
  @elseif $size >= $height {
    $buffer: 1.5;
  }
  line-height: ( ( ($height - $offset) * $buffer) / $size );
}



// == REM == //

// Get the rem equivalent of a value; via https://github.com/rowanmanning/rem
@function rem-value ($value, $offset: 0) {

  // If value is a number, do some magic rem stuff
  @if type-of($value) == "number" {

    // Convert to unitless value
    @if unit($value) == "px" {
      $value: $value / ($value * 0 + 1);
    }

    // Return rem value
    @return #{($value - $offset) / $base-size}rem;
  }

  // Non-numeric value, just return
  @return $value;
}

// Rem mixin
@mixin rem($property, $values, $offset: 0) {

  // Empty list to populate
  $rem-values: unquote("");

  // Loop over pixel values to get rem values
  @each $value in $values {
    $rem-values: append($rem-values, rem-value($value, $offset));
  }

  // Set the pixel/rem values
  @if $pixel-values {
    #{$property}: $values;
  }
  #{$property}: $rem-values;
}
