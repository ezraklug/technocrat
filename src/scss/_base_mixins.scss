// ==== MIXINS ==== //

// == BASE METAL == //

// Rem generator via Twenty Twelve; specify property, pixel values, and optional offset to account for borders and such
@mixin rem($property, $px-values, $offset: 0) {

  // Convert the baseline into rems
  $baseline-rem: $base+0px / 1rem;

  // Subtract the offset
  @if type-of($px-values) == "number" {
    $px-values: $px-values - $offset;
  }

  // Print the first line in pixel values
  #{$property}: $px-values;

  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem;
  }

  // Create an empty list that we can dump values into
  @else {
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value);
      }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}



// == FONTS == //

// Font size mixin; $size (integer): pixel value of desired font size; $offset (integer); pixel value offset to account for borders and other things that disrupt line-height
@mixin font-size($size: $s-text, $offset: 0) {

  @include rem("font-size", $size+0px);

  // Buffer for font sizes larger than the baseline; simply doubles or triples baseline size as needed
  $buffer: 1;

  @if $size >= $baseline * 2 {
    $buffer: 2.5;
  }
  @elseif $size >= $baseline {
    $buffer: 1.5;
  }

  line-height: ( ( ($baseline - $offset) * $buffer) / $size );
}



// Full-width font sizes; not to be used when offsets are required
@mixin font-sizes($size1, $size2) {
  @include font-size($size1);
  .full-width & {
    @include font-size($size2);
  }
}



// Letterpress effect
@mixin letterpress($colour: $c-body-bg) {
  text-shadow: 0px 1px $colour;
}



// == IMAGES == //

// To be applied to the container element around an image standing in for a link (e.g. post thumbnail, gallery item)
@mixin image-fade {
  backface-visibility: hidden; // Prevents flicker
  overflow: hidden;
  img {
    @include border-radius;
    display: block;
    transition: all .65s ease; // Can't transition "filter", probably because we'd have to add a bunch of vendor prefixes; let's just transition all
    width: 100%;
  }
  &:hover {
    cursor: pointer;
    img {
      filter: brightness(70%) opacity(80%) grayscale(100%);
      transition: all .4s ease;
    }
  }
}



// Image fallback; a stylized placeholder for images that don't load or are slow to load
@mixin image-fallback {
  @include border-radius;
  background-color: $c-body-darker;
  background-image: repeating-linear-gradient(45deg, transparent, transparent $spacer/4, black(.04) $spacer/4, black(.04) $spacer/2);
  box-shadow: 0 0 $spacer*2 black(.1) inset;
  transition: background-color .8s ease-out, box-shadow 1.1s ease-in;
  &:hover {
    background-color: lighten($c-body-darker, 7);
    box-shadow: 0 0 $spacer*1 black(.08) inset;
    transition: background-color .5s ease-in-out, box-shadow .3s ease;
  }
}



// Image overlay; used in gallery and thumbnail overlays
@mixin image-overlay($overlay: ".wp-caption", $style: "title") {
  @include image-fade;
  position: relative;
  #{$overlay} {
    @include font-size($s-text-small);
    @if $style == "caption" {
      @include font-style("image-overlay-caption");
      text-align: left;
      text-shadow: 0px 1px 2px black(.8);
    }
    @if $style == "title" {
      @include font-style("image-overlay-title");
      text-align: center;
      text-shadow: 0px 1px 2px black(.8);
      @include k-media-above($b-large) {
        @include font-size($s-text-bigger);
        text-shadow: 1px 1px 5px black(.7);
      }
    }
    @include border-radius(0 0 $d-radius $d-radius);
    @include k-regular-italics;
    @include rem("padding", $spacer/4 $spacer/4);
    background-image: linear-gradient(black(0), black(.5));
    background-repeat: repeat-x;
    box-sizing: border-box;
    color: white();
    line-height: 1.25; // No need for vertical rhythm here!
    margin: 0;
    max-height: 100%;
    opacity: 0;
    pointer-events: none; // Allows click-through; not compatible with older versions of IE and such; see: http://caniuse.com/#search=pointer-events
    position: absolute;
      bottom: 0;
      left: 0;
    transition: opacity .75s ease-out;
    width: 100%;
    &:before {
      content: "";
      height: 100%;
      min-height: $spacer;
      position: absolute;
        left: 0;
        top: 0;
      width: 100%;
    }
  }
  &:hover {
    #{$overlay} {
      opacity: 1;
      transition: opacity .4s ease;
    }
  }
}



// == LINKS == //

// Link stylist; pass 'false' to disable styling for any of these
// @TODO: group same values
@mixin link-stylist(
  $link: $c-link,
  $link-visited: $c-link-v,
  $link-hover: $c-link-h,
  $link-active: $c-link-a,
  $link-focus: $c-link-f,
  $link-border: true,
  $link-color: true
) {
  a {
    @if $link-border == true {
      border-bottom: 1px dotted rgba($link, .30);
    }
    @if $link-color == true {
      color: $link;
    }
    @if not $link-visited == false {
      &:visited {
        @if $link-border == true {
          border-bottom-color: rgba($link-visited, .25);
        }
        @if $link-color == true {
          color: $link-visited;
        }
      }
    }
    @if not $link-hover == false {
      &:hover {
        @if $link-border == true {
          border-bottom-color: rgba($link-hover, .35);
          border-bottom-style: solid;
        }
        @if $link-color == true {
          color: $link-hover;
        }
      }
    }
    @if not $link-active == false {
      &:active {
        @if $link-border == true {
          border-bottom-color: rgba($link-active, .40);
          border-bottom-style: solid;
        }
        @if $link-color == true {
          color: $link-active;
        }
      }
    }
    @if not $link-focus == false {
      &:focus {
        @if $link-border == true {
          border-bottom-color: rgba($link-focus, .30);
        }
        @if $link-color == true {
          color: $link-focus;
        }
      }
    }
  }
}



// == UI ELEMENTS == //

// Button styling
@mixin button {
  @include border-radius;
  @include font-size($s-text-smaller, 4);
  @include font-style("button");
  @include gradient-vertical($d-gradient-1, $d-gradient-2);
  @include letterpress;
  @include rem("padding", 0 $spacer/4);
  border: $d-interface;
  box-shadow: 0 1px 2px rgba(64, 64, 64, .1);
  color: $c-text;
  cursor: pointer;
  display: inline-block;
  text-decoration: none;
  vertical-align: middle;
  &:hover {
    @include gradient-vertical(lighten($d-gradient-1, 3), lighten($d-gradient-2, 1));
    color: $c-text-lighter;
  }
  &:active {
    @include gradient-vertical(darken($d-gradient-1, 7), lighten($d-gradient-2, 1));
    border-color: 1px solid darken($c-body-bg, 8);
    box-shadow: inset 0 2px 3px 0 #c6c6c6, 0 1px 2px rgba(64, 64, 64, .1);
    color: lighten($c-text-lightest, 10);
  }
  &:focus {
    outline: none; // Blue border is rather distracting
  }
}



// Dropdown menu; for use with the main site navigation menu
@mixin dropdown-menu($wordpress-menu: true) {
  @include k-dropdown(
    $dropdown-background: $c-sub-bg linear-gradient(white(.5), white(0)) repeat-x
  , $dropdown-border-color: $c-interface
  , $dropdown-border-radius: $d-radius
  , $dropdown-border-size: 1px
  , $dropdown-shadow-inside: 0 -2px 3px rgba(64, 64, 64, .08) inset
  , $dropdown-shadow-outside: 1px 1px 4px black(.08)
  );
  @include font-size($s-sub);
  li {
    a {
      color: $c-sub;
      &:visited {
        color: $c-sub;
      }
      &:hover {
        background: darken($c-sub-bg, 13);
        box-shadow: 0 -2px 4px black(.06) inset;
        color: $c-sub-h;
      }
      &:active,
      &:focus {
        color: $c-sub-h;
      }
    }
  }
  @if $wordpress-menu == true {
    .current-menu-item,
    .current-menu-ancestor,
    .current_page_item,
    .current_page_ancestor {
      > a {
        background: darken($c-sub-bg, 3);
        color: lighten($c-sub, 23);
        &:visited {
          color: lighten($c-sub, 23);
        }
        &:hover,
        &:active,
        &:focus {
          color: lighten($c-sub-h, 13);
        }
      }
    }
  }
}



// Text input; for use with forms, textarea, etc.
@mixin text-input($shadow: $c-shadow, $font-size: $s-text-smaller) {
  @include border-radius;
  @include font-size($font-size, 8);
  @include font-style("input");
  @include letterpress;
  @include rem("padding", 3px);
  background: darken($c-body-bg, 3);
  border: $d-divider;
  box-shadow: inset 2px 2px 4px $shadow;
  color: lighten($c-text, 23);
  &:focus {
    color: $c-text;
    background-color: darken($c-body-bg, 7);
  }
}
