// ==== IMAGE ==== //

// - Layout
// - Captions
// - Gallery
// - Overlays
// - Placeholder



// == LAYOUT == //

// Individual responsive images in posts, not comments; isolating these declarations from _content.scss reduces bloat
figure.wp-caption,
.entry-content p img {
  @extend %spacer-below;
  backface-visibility: hidden;
  overflow: auto; // Without this the floats won't float
  &.alignleft {
    margin-right: percentage( spacer() / $width-main );
    .full-width & {
      margin-right: percentage( spacer() / $width-content );
    }
  }
  &.alignright {
    margin-left: percentage( spacer() / $width-main );
    .full-width & {
      margin-left: percentage( spacer() / $width-content );
    }
  }
  &.aligncenter {
    img { // Applies centering to the image within the figure, not the figure element itself
      @include k-center-block;
    }
  }
}
figure.wp-caption {
  a,
  a:visited,
  a:hover,
  a:focus,
  a:active {
    border: none;
    outline: none;
  }
}



// == CAPTIONS == //

// These classes apply to regular captions in entry content
:not(figure).wp-caption {
  @extend %spacer-below;
  max-width: 100%; // Keep wide captions from overflowing their containers
}
// Caption styling; be careful, anything declared here must be superseded by children of the overlay class (below)
.entry-caption,
.wp-caption-text {
  @extend %clearfix-below;
  @include font-size(text-smaller);
  @include k-reverse-italics;
  color: lighten( colour(text-lightest), 10);
  max-width: 100%;
  .full-width & {
    @include font-size(text-small);
  }
}



// == GALLERY == //

// Parts of this were originally adapted from Independent Publisher: https://github.com/raamdev/independent-publisher/

// Notes:
// - WordPress applies the `gallery` and `gallery-item` classes in `[gallery]` shortcode output
// - The following styling builds on that in an extensible way i.e. you can apply the `gallery` class to other things and achieve the same layout
// - One caveat is that the `gallery-item` class is NOT applied in other contexts; it is simply inherited by qualifying `figure` elements

// The main gallery class
.gallery {
  @extend %clearfix;

  // Nicer layout for successive galleries
  @if spacer() != $spacer-image {
    & + & {
      @include rem( margin-top, - ( spacer() - $spacer-image ) ); // Assumes spacer() > $spacer-image
    }
  }
}

// Individual gallery items with percentage-based margins
.gallery-item,
.gallery figure.wp-caption {
  float: left;
  margin: 0 percentage( $spacer-image / $width-main ) percentage( $spacer-image / $width-main ) 0;
  width: 100%; // Force images to fill the available space
  .full-width & {
    margin: 0 percentage( $spacer-image / $width-content ) percentage( $spacer-image / $width-content ) 0;
  }
}

// Generate column widths and flow control for 2, 3, 4, 5, and 6 column galleries
@for $i from 2 to 7 {
  .gallery-columns-#{$i} {
    .gallery-item,
    figure.wp-caption {
      max-width: percentage( 1 / ($i) ) - percentage( ( ( $spacer-image * ($i - 1) ) / $width-main ) / $i );
      &:nth-of-type(#{$i}n) {
        margin-right: 0;
      }
      &:nth-of-type(#{$i}n+1) {
        clear: left;
      }
      .full-width & {
        max-width: percentage( 1 / ($i) ) - percentage( ( ( $spacer-image * ($i - 1) ) / $width-content ) / $i );
      }
    }
  }
}

// Don't display captions on small thumbnails and try to be halfway smart about it
@if module(gallery-shortcode) {
  .gallery-columns-4,
  .gallery-columns-5,
  .gallery-columns-6 {
    .gallery-caption {
      @extend %hide-below-large;
    }
  }
}

// This class is specific to the output of the WordPress `[gallery]` shortcode and cannot be filtered
// If you don't use the built-in gallery shortcode be sure to switch this feature off; it wastefully duplicates a bunch of styles from the generalized overlay class
@if module(gallery-shortcode) {
  .gallery-item {
    @include image-overlay(".gallery-caption"); // Will output some wasteful metadata classes but that can't be helped
    .gallery-caption {
      @include rem( font-size, size(text-small) + 0px );
      line-height: 1.25; // No need for vertical rhythm here!
    }
  }
}



// == OVERLAYS == //

// Image overlay class; apply this to any image container (likely a `figure` element)
.overlay {
  @include image-overlay;
  text-shadow: 0px 1px 2px black(.8);

  // Using a class instead of `figcaption` to combat the specificity of caption styles defined above
  .wp-caption-text {
    @include font-style(image-overlay-title);
    @include rem( font-size, size(text) + 0px );
    line-height: 1.25; // No need for vertical rhythm here!
    text-align: center;
    @include k-media-above( break(medium) ) {
      .full-width & {
        @include rem( font-size, size(text-bigger) + 0px );
        text-shadow: 1px 1px 5px black(.7);
      }
    }
  }
  footer {
    @include rem( font-size, size(text-small) + 0px );
    line-height: 1.4; // No need for vertical rhythm here!
    @include k-media-above( break(medium) ) {
      .full-width & {
        @include rem( font-size, size(text) + 0px );
      }
    }
  }

  // Optional icon sizing and drop-shadowing
  @if module(ubik-svg-icons) {
    & .icon {
      @include rem( height, 14px );
      @include rem( width, 14px );
      filter: drop-shadow( 0px 1px 1px black(.6) );
      @include k-media-above( break(medium) ) {
        @include rem( height, 20px );
        @include rem( width, 20px );
        vertical-align: -2px;
      }
    }
  }
}



// == PLACEHOLDER == //

// Image placeholder hack; fills out the space when a requested image isn't found
.no-image {
  @include image-placeholder;
  @if module(ubik-svg-icons) {
    .icon {
      @include k-absolute(top 0 left 0 bottom 0 right 0);
      color: grey(120);
      filter: drop-shadow( 2px 2px 4px black(.3) );
      margin: auto;
      opacity: .5;
      height: 75%;
      width: 75%;
    }
  }
}
