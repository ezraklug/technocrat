// ==== IMAGE ==== //

// == GENERAL == //

.site-content img {
  @include border-rounded;

  // Force images to adhere to container width
  // This is usually paired with `height: auto;` but we are managing height with Ubik Imagery in this theme
  max-width: 100%;
  &:not(.ubik-img) {
    height: auto;
  }

  // Alt text and image placeholder styling
  @include font-size(text-small, 0, 20);
  background: colour(body-dark);
  color: colour(text-lightest);
  overflow: hidden;
  text-align: center;
  text-shadow: none;
  vertical-align: middle;
  word-break: break-word;
}



// == CONTENT == //

// Individual responsive images in posts, not comments
figure.wp-caption,
.entry-content p img {
  @extend %spacer-below;
  backface-visibility: hidden;
  max-width: 100%;
  &.alignleft {
    margin-right: percentage( spacer() / $width-content );
  }
  &.alignright {
    margin-left: percentage( spacer() / $width-content );
  }
  &.aligncenter {
    @include scut-center-block;
  }

  // Reset borders and outlines for linked images
  a,
  a:visited,
  a:hover,
  a:focus,
  a:active {
    border: none;
    outline: none;
  }
}

// Specific to the image wrapper; forces full-width images on small viewports
figure.wp-caption {
  @include k-media-below( break(tiny) ) {
    .entry-content &,
    .gallery-flex & {
      margin-left: spacer(-1/2) !important;
      margin-right: 0 !important;
      max-width: calc( 100% + #{spacer()} ) !important; // Adding the spacer accounts for the margins usually imposed on the image at this breakpoint
      .wp-caption-text {
        @include rem( padding-left, spacer(1/2) ); // Should match padding in `_layout.scss`
        @include rem( padding-right, spacer(1/2) );
      }
      img,
      .no-image {
        border-radius: 0 !important;
      }
      &.no-id {
        width: calc( 100% + #{spacer()} );
      }
    }
    .gallery-flex & {
      width: calc( 100% + #{spacer()} ) !important;
    }
  }
}

// Intrinsic ratio hook for use with Ubik Imagery
.ubik-wrap-inner {
  display: block;
  height: 0;
  position: relative;
  img {
    @include k-absolute( top 0 left 0 right 0 bottom 0 );
  }
}

// Image placeholder hack; fills space when a requested image isn't found
.no-image {
  @include image-placeholder;
}



// == CAPTIONS & OVERLAYS == //

// These classes apply to regular captions in entry content; anything attached to a `figure` element is defined elsewhere
:not(figure).wp-caption {
  @extend %max-width-100; // Keep wide captions from overflowing their containers
  @extend %spacer-below;
}

// Caption styling; be careful, anything declared here *must* be superseded by children of the overlay classes as needed
.entry-caption,
.wp-caption-text {
  @extend %clearfix-below;
  @include font-style(entry-caption);
  max-width: 100%;
}

// Image overlay class; apply this to any image container (likely a `figure` element)
.overlay {
  @include image-overlay;
  @include text-shadow-small( black(.75) );

  // Using a class instead of `figcaption` to combat the specificity of caption styles defined above
  .wp-caption-text {
    @include font-style(image-overlay-title);
    .gallery-static.gallery-columns-4 & {
      @include k-media-below( break(tiny) ) {
        display: none;
      }
    }
  }

  // The footer contains additional data *e.g.* comment count
  footer {
    &.comments {
      @include font-style(image-overlay-comments);
    }
    &.date {
      @include font-style(image-overlay-date);
    }
    &.small {
      @include font-size( text-small, 0, 20 );
      transition-delay: .23s;
      @include k-media-between( break(tiny), break(medium) ) {
        @include font-size( text-smaller, 0, 20 );
      }
      .gallery-static & {
        @include k-media-below( break(small) ) {
          @include font-size( text-smaller, 0, 20 );
        }
      }
      .gallery-static.gallery-columns-4 & {
        @include k-media-below( break(medium) ) {
          @include font-size( text-smaller, 0, 20 );
        }
      }
    }
    &.smaller {
      @include font-size( text-smaller, 0, 20 );
      transition-delay: .23s;
      @include k-media-between( break(tiny), break(medium) ) {
        @include font-size( text-smallest, 0, 20 );
      }
      .gallery-static & {
        @include k-media-below( break(medium) ) {
          display: none;
        }
      }
    }
  }
}



// == GALLERY & IMAGE LAYOUT == //

// This section is a bit complicated, partly out of my previous interest in maintaining basic support for the core WordPress `[gallery]` shortcode, the output of which cannot be filtered
// The `gallery` class in Pendrell is used anywhere you'd like to group images together; the `gallery-item` class should be used on individual `figure` or equivalent wrapping elements
// Apart from the `gallery` class there are two special classes:
// - `gallery-flex`, a responsive gallery that decreases the column count according to viewport width
// - `gallery-static`, a non-responsive gallery that maintains the same layout at all viewport widths

// A simple helper mixin to calculate the max-width from a column count and the bounding width
@mixin gallery-max-width( $columns, $width: $width-medium ) {
  max-width: percentage( 1 / $columns ) - percentage( ( ( $spacer-image * ($columns - 1) ) / $width ) / $columns );
}

// The main gallery class
.gallery {
  @extend %clearfix;
  @if spacer() != $spacer-image {
    & + & {
      @include rem( margin-top, - ( spacer() - $spacer-image ) ); // Nicer layout for successive galleries; assumes spacer() > $spacer-image
    }
  }
}

// Individual gallery items with percentage-based margins
.gallery-item {
  width: 100%; // Force images to fill the available space
  @include k-media-above( break(tiny) ) {
    float: left;
    margin: 0 percentage( $spacer-image / $width-content ) percentage( $spacer-image / $width-content ) 0;
  }
  @include k-media-below( break(tiny) ) {
    @include rem( margin, 0 0 spacer(1/2) 0 );
    float: none;
  }
}

// 2, 3, and 4 column layouts have the same declarations so they are grouped here for convenience
@for $i from 2 to 5 {
  .gallery-columns-#{$i} {
    .gallery-item {
      @include k-media-above( break(tiny) ) {
        @include gallery-max-width( $i, $width-content );
        img {
          width: 100%; // Force images to fill the available space
        }
        &:nth-of-type(#{$i}n) {
          margin-right: 0;
        }
        &:nth-of-type(#{$i}n+1) {
          clear: left;
        }
      }
    }
  }
}

// The 4 column layout is a special case; it breaks from 4 columns to 2 between the tiny and medium breakpoints (but not for static galleries)
.gallery-columns-4:not(.gallery-static) {
  .gallery-item {
    @include k-media-between( break(tiny), break(medium) ) {
      @include gallery-max-width( 2, $width-content );
      &:nth-of-type(2n) {
        margin-right: 0;
      }
      &:nth-of-type(2n+1) {
        clear: left;
      }
    }
  }
}

// Static layout helpers; this allows for metadata to be progressive hidden for static galleries of different sizes
%gallery-static-overlay-footer-2 {
  @include k-media-below( break(tiny) ) {
    display: none;
  }
}
%gallery-static-overlay-footer-3 {
  @include k-media-below( break(small) ) {
    display: none;
  }
}
%gallery-static-overlay-footer-4 {
  @include k-media-below( break(medium) ) {
    display: none;
  }
}

// A static image layout: displays however many columns of images without changing at any breakpoint
.gallery-static {

  // Re-instate some of the styling that is lost when dropping below the tiny breakpoint in the default declaration
  .gallery-item {
    float: left;
    margin: 0 percentage( $spacer-image / $width-content ) percentage( $spacer-image / $width-content ) 0;
  }
  @for $i from 2 to 5 {
    &.gallery-columns-#{$i} {
      .gallery-item {
        @include gallery-max-width( $i, $width-content );
        footer {
          @extend %gallery-static-overlay-footer-#{$i};
        }
        &:nth-of-type(#{$i}n) {
          margin-right: 0;
        }
        &:nth-of-type(#{$i}n+1) {
          clear: left;
        }
      }
    }
  }
}

// Responsive image layout; 3, 2, or 1 columns as determined by the viewport width
// For greater enjoyment be sure to pull in content in some even multiple of 3 e.g. 12, 18, etc.
.gallery-flex {
  .gallery-item {
    @include k-media-between( break(tiny), break(medium) ) {
      @include gallery-max-width( 2, $width-content );
      &:nth-of-type(2n) {
        margin-right: 0;
      }
      &:nth-of-type(2n+1) {
        clear: left;
      }
    }
    @include k-media-above( break(medium) ) {
      @include gallery-max-width( 3, $width-content );
      &:nth-of-type(3n) {
        margin-right: 0;
      }
      &:nth-of-type(3n+1) {
        clear: left;
      }
    }
  }
}



// This class is specific to the output of the WordPress `[gallery]` shortcode which cannot be filtered
// If you don't use the built-in gallery shortcode be sure to switch this feature off; it duplicates a bunch of styles from the generalized overlay class
@if module(gallery-shortcode) {
  .gallery-item {
    @include image-overlay(".gallery-caption"); // Will output some wasteful metadata classes but that can't be helped
    .gallery-caption {
      @include rem( font-size, size(text-small) + 0px );
      line-height: 1.25; // No need for vertical rhythm here!
    }
    // This theme does not support a column count greater than 4
    .gallery-columns-5 &,
    .gallery-columns-6 &,
    .gallery-columns-7 &,
    .gallery-columns-8 &,
    .gallery-columns-9 & {
      @include rem( margin, 0 0 spacer() 0 );
      float: none;
    }
  }
}



// Magnific Popup; see `./lib/_magnific.scss` for more
@if module(magnific-popup) {
  @include magnific-popup;
}
