// ==== MIXINS ==== //

// == GENERAL == //

// Border radius; mainly used to allow for a default site-wide setting; via Twenty Twelver
@mixin border-radius($radius: $d-radius) {
  border-radius: $radius;
}

// Box shadows; via Twenty Twelver
@mixin box-shadow($shadow: $d-shadow ) {
  box-shadow: $shadow;
}
@mixin box-shadow-layered($shadow: $d-shadow, $shadow-layered: $d-shadow ) {
  box-shadow: $shadow, $shadow-layered;
}

// Clearfix suite
@mixin clearfix-above() {
  &:before {
    content: "";
    display: table;
    clear: both;
  }
}
@mixin clearfix-below() {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// Gradients; via Twenty Twelve
@mixin gradient-horizontal ($begin: $d-gradient-begin, $end: $d-gradient-end) {
  background-color: $end;
  background-image: linear-gradient(left, $begin, $end);
  background-repeat: repeat-x;
}
@mixin gradient-vertical ($begin: $d-gradient-begin, $end: $d-gradient-end) {
  background-color: $end;
  background-image: linear-gradient(top, $begin, $end);
  background-repeat: repeat-x;
}



// == INTERFACE == //

// Header font style
@mixin font-header() {
  font-family: $font-head;
  font-weight: 400;
}

// Ghosting; use on any element to obscure it from view except on hover
@mixin ghost($value: 0.6) {
  opacity: $value;
  transition: opacity .5s ease;
  &:hover {
    opacity: 1;
    transition: opacity .2s ease-in;
  }
}

// Highlights text; used with ins and mark tags
@mixin highlight($color: $c-highlight) {
  @include border-radius;
  @include rem('padding', $spacer/12 $spacer/8);
  background: $color;
  border: 1px solid darken($color, 7);
  display: inline;
}

// Inset box; for use with blockquote, pre, etc.
@mixin inset-box($color: $c-text-box, $background: $c-text-box-bg, $shadow: $c-text-box-sh) {
  @include border-radius(12px);
  @include box-shadow-layered(inset 4px 4px 8px $shadow, 1px 1px 4px $shadow);
  @include rem('margin', 0 0 $spacer 0);
  @include rem('padding', $spacer $spacer 0);
  background: $background;
  color: $color;
  text-shadow: 0px 1px $c-body-bg;
}

// Bordered links; pass 'false' to disable styling for any of these
@mixin link-stylist(
  $link: $c-link,
  $link-visited: $c-link-v,
  $link-hover: $c-link-h,
  $link-active: $c-link-a,
  $link-focus: $c-link-f,
  $link-border: true,
  $link-color: true
) {
  a {
    @if $link-border == true {
      border-bottom: 1px dotted rgba($link, 0.30);
    }
    @if $link-color == true {
      color: $link;
    }
    @if not $link-visited == false {
      &:visited {
        @if $link-border == true {
          border-bottom-color: rgba($link-visited, 0.25);
        }
        @if $link-color == true {
          color: $link-visited;
        }
      }
    }
    @if not $link-hover == false {
      &:hover {
        @if $link-border == true {
          border-bottom-color: rgba($link-hover, 0.35);
          border-bottom-style: solid;
        }
        @if $link-color == true {
          color: $link-hover;
        }
      }
    }
    @if not $link-active == false {
      &:active {
        @if $link-border == true {
          border-bottom-color: rgba($link-active, 0.40);
          border-bottom-style: solid;
        }
        @if $link-color == true {
          color: $link-active;
        }
      }
    }
    @if not $link-focus == false {
      &:focus {
        @if $link-border == true {
          border-bottom-color: rgba($link-focus, 0.30);
        }
        @if $link-color == true {
          color: $link-focus;
        }
      }
    }
  }
}

// Text input; for use with forms, textarea, etc.
@mixin text-input($shadow: $c-text-box-sh) {
  @include border-radius;
  @include box-shadow(inset 2px 2px 4px $shadow);
  @include font-size($h5, 8);
  @include rem('padding', 3px);
  background: darken($c-body-bg, 3);
  border: $d-divider;
  color: lighten($c-body, 23);
  font-family: inherit;
  &:focus {
    color: $c-body;
    background-color: darken($c-body-bg, 7);
  }
}



// == UTILITIES == //

// @TODO: breakpoints

// Rem generator; via Twenty Twelve; @TODO: clean this up
//
// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.

@mixin rem($property, $px-values, $offset: 0) {
  // Convert the baseline into rems
  $baseline-rem: $base-default / 1rem;

  // Subtract the offset
  @if type-of($px-values) == "number" {
    $px-values: $px-values - $offset;
  }

  // Print the first line in pixel values
  #{$property}: $px-values;

  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem; }

  // Create an empty list that we can dump values into
  @else {
    $rem-values: unquote("");
    @each $value in $px-values {

      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value); }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem); } }

    // Return the property and its list of converted values
    #{$property}: $rem-values; } }

// Font size mixin
// $size (integer): pixel value of desired font size
// $offset (integer); pixel value used in instances where there is a border mucking up the line-height
@mixin font-size($size: $font-size, $offset: 0) {
  @include rem('font-size', $size+0px);
  $basefactor: 1;
  // Buffer for font sizes over the line-height
  @if $size >= $base * 2 {
    $basefactor: 3;
  } @elseif $size >= $base {
    $basefactor: 2;
  }
  line-height: ( ( ($base - $offset) * $basefactor) / $size );
}
