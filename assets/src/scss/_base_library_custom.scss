// ==== MIXINS ==== //

// Load the theme-agnostic functions and mixins library; the rest of these mixins are specific to this theme
@import "base_library";



// == GENERAL == //

// Border radius; mainly used to allow for a default site-wide setting; via Twenty Twelver
@mixin border-radius($radius: $d-radius) {
  border-radius: $radius;
}



// Box shadows; via Twenty Twelver
@mixin box-shadow($shadow: $d-shadow ) {
  box-shadow: $shadow;
}
@mixin box-shadow-layered($shadow: $d-shadow, $shadow-layered: $d-shadow ) {
  box-shadow: $shadow, $shadow-layered;
}



// Various font styles
@mixin font-button {
  @include font-header;
}
@mixin font-header {
  font-family: $f-head;
  font-weight: 300;
}



// Font size mixin; $size (integer): pixel value of desired font size; $offset (integer); pixel value offset to account for borders and other things that disrupt line-height
@mixin font-size($size: $s-text, $offset: 0) {
  @include rem('font-size', $size+0px);
  $buffer: 1; // Buffer for font sizes larger than the baseline; simply doubles or triples baseline size as needed
  @if $size >= $baseline * 2 { $buffer: 3; }
  @elseif $size >= $baseline { $buffer: 2; }
  line-height: ( ( ($baseline - $offset) * $buffer) / $size );
}



// Font size mixin customed for full-width display; takes two parameters instead of one, otherwise the same
@mixin font-size-fw($size: $s-text, $size-fw: $s-text-big, $offset: 0) {
  @include font-size($size, $offset);
  @include full-width($media-query: $break-single-column) {
    @include font-size($size-fw, $offset);
  }
}



// Full-width mixin; just a shortcut for wrapping content using the optional full-width functionality
@mixin full-width($body-class: null, $media-query: null) {
  @if $full-width == true {
    .full-width#{$body-class} & {
      @if $media-query != null {
        @media screen and (min-width: $media-query) {
          @content;
        }
      } @else {
        @content;
      }
    }
  }
}



// Gradients; via Twenty Twelve
@mixin gradient-horizontal($begin: $d-gradient-1, $end: $d-gradient-2) {
  background-color: $end;
  background-image: linear-gradient(left, $begin, $end);
  background-repeat: repeat-x;
}
@mixin gradient-vertical($begin: $d-gradient-1, $end: $d-gradient-2) {
  background-color: $end;
  background-image: linear-gradient(top, $begin, $end);
  background-repeat: repeat-x;
}



// Highlights text; used with ins and mark tags
@mixin highlight($color: $c-highlight) {
  @include border-radius;
  background: rgba($color, .5);
  border: 1px solid darken($color, 7);
  display: inline;
  padding: 0.08em 0.25em 0.08em 0.25em; // Padding should be proportionate, not rooted to rems
}



// Image fallback; a stylized placeholder for images that don't load or are slow to load
@mixin image-fallback() {
  @include border-radius;
  @include box-shadow(0 0 $spacer*2 black(.1) inset);
  background-color: $c-text-box-bg;
  transition: background-color .8s ease-out;
  &:hover {
    background-color: lighten($c-text-box-bg, 3);
    transition: background-color .5s ease-in-out;
  }
}



// Image overlay; used in gallery and thumbnail overlays
@mixin image-overlay($overlay: ".wp-caption", $style: "title") {
  @include border-radius;
  overflow: hidden;
  position: relative;
  img {
    backface-visibility: hidden; // Prevents flicker
    transition: all .5s ease-out; // Can't transition: filter for some reason
    width: 100%;
  }
  #{$overlay} {
    @include font-size($s-text-small);
    @if $style == "caption" {
      text-align: left;
      text-shadow: 0px 1px 2px black(.8);
    }
    @if $style == "title" {
      @media screen and (min-width: $break-single-column) {
        @include font-header;
        @include font-size($s-text-big);
        text-shadow: 2px 2px 5px black(.6);
      }
      text-align: center;
      text-shadow: 0px 1px 2px black(.8);
    }
    @include border-radius(0 0 $d-radius $d-radius);
    @include regular-italics;
    @include rem('padding', $spacer/4 $spacer/4);
    background-image: linear-gradient(black(0), black(.8));
    background-repeat: repeat-x;
    box-sizing: border-box;
    color: $c-white;
    line-height: 1.25; // No need for vertical rhythm here!
    margin: 0;
    max-height: 100%;
    opacity: 0;
    position: absolute;
      bottom: 0;
      left: 0;
    transition: opacity .8s ease-out;
    width: 100%;
    &:before {
      content: "";
      height: 100%;
      min-height: $spacer;
      position: absolute;
        left: 0;
        top: 0;
      width: 100%;
    }
  }
  &:hover {
    cursor: pointer;
    img {
      filter: brightness(70%) grayscale(100%);
      transition: all .3s ease-in;
    }
    #{$overlay} {
      opacity: 1;
      transition: opacity .5s ease;
    }
  }
}



// Inset box; for use with blockquote, pre, etc.
@mixin inset-box($color: $c-text-box, $background: $c-text-box-bg, $shadow: $c-text-box-sh) {
  @include border-radius(12px);
  @include box-shadow-layered(inset 4px 4px 8px $shadow, 1px 1px 4px $shadow);
  @include rem('margin', 0 0 $spacer 0);
  @include rem('padding', $spacer $spacer 0);
  background: rgba($background, .5);
  color: $color;
  text-shadow: 0px 1px $c-body-bg;
}



// Layout box; pads and centers the header, content area, and footer
@mixin layout-box {
  @include rem('padding-left', $spacer);
  @include rem('padding-right', $spacer);
  @media screen and (min-width: $break-medium) {
    @include center-block($content-width);
    @include rem('padding-left', $spacer*1.5);
    @include rem('padding-right', $spacer*1.5);
  }
}



// Link stylist; pass 'false' to disable styling for any of these
@mixin link-stylist(
  $link: $c-link,
  $link-visited: $c-link-v,
  $link-hover: $c-link-h,
  $link-active: $c-link-a,
  $link-focus: $c-link-f,
  $link-border: true,
  $link-color: true
) {
  a {
    @if $link-border == true {
      border-bottom: 1px dotted rgba($link, 0.30);
    }
    @if $link-color == true {
      color: $link;
    }
    @if not $link-visited == false {
      &:visited {
        @if $link-border == true {
          border-bottom-color: rgba($link-visited, 0.25);
        }
        @if $link-color == true {
          color: $link-visited;
        }
      }
    }
    @if not $link-hover == false {
      &:hover {
        @if $link-border == true {
          border-bottom-color: rgba($link-hover, 0.35);
          border-bottom-style: solid;
        }
        @if $link-color == true {
          color: $link-hover;
        }
      }
    }
    @if not $link-active == false {
      &:active {
        @if $link-border == true {
          border-bottom-color: rgba($link-active, 0.40);
          border-bottom-style: solid;
        }
        @if $link-color == true {
          color: $link-active;
        }
      }
    }
    @if not $link-focus == false {
      &:focus {
        @if $link-border == true {
          border-bottom-color: rgba($link-focus, 0.30);
        }
        @if $link-color == true {
          color: $link-focus;
        }
      }
    }
  }
}



// Menu dropdown; should be applied to a ul element
@mixin menu-dropdown {
  @include border-radius($d-radius+1px); // An extra pixel for the 1px border
  @include box-shadow-layered(2px 2px 4px rgba(64, 64, 64, .09), 0 -2px 2px rgba(64, 64, 64, .09) inset);
  background-color: $c-sub-bg;
  background-image: linear-gradient( white(.5), white(0)); // A light touch
  background-repeat: repeat-x;
  border: $d-interface; // Must be offset; box-sizing doesn't work here because heights are line-heights set by font-size()
  li {
    &:first-child > a {
      @include border-radius($d-radius $d-radius 0 0);
    }
    &:last-child > a {
      @include border-radius(0 0 $d-radius $d-radius);
    }
    &:only-of-type > a {
      @include border-radius;
    }
    a {
      @include font-size($s-sub);
      @include rem('padding', 0 $spacer/4);
      color: $c-sub;
      &:visited {
        color: $c-sub;
      }
      &:hover {
        @include box-shadow(0 -2px 4px rgba(64, 64, 64, .06) inset);
        background: darken($c-sub-bg, 13);
        color: $c-sub-h;
      }
      &:active {
        color: $c-sub-h;
      }
      &:focus {
        color: $c-sub-h;
      }
    }
    ul {
      margin-top: -1px; // Offset border (see above)
    }
  }


}




// Rem generator via Twenty Twelve; specify property, pixel values, and optional offset to account for borders and such
@mixin rem($property, $px-values, $offset: 0) {

  // Convert the baseline into rems
  $baseline-rem: $base+0px / 1rem;

  // Subtract the offset
  @if type-of($px-values) == "number" {
    $px-values: $px-values - $offset;
  }

  // Print the first line in pixel values
  #{$property}: $px-values;

  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem;
  }

  // Create an empty list that we can dump values into
  @else {
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value);
      }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}



// Small print
@mixin small-print($font-size: $s-text-small) {
  @include font-size($font-size);
  color: $c-small-print;
}



// Text input; for use with forms, textarea, etc.
@mixin text-input($shadow: $c-text-box-sh, $font-size: $s-text-smaller) {
  @include border-radius;
  @include box-shadow(inset 2px 2px 4px $shadow);
  @include font-size($font-size, 8);
  @include rem('padding', 3px);
  background: darken($c-body-bg, 3);
  border: $d-divider;
  color: lighten($c-body, 23);
  font-family: inherit;
  &:focus {
    color: $c-body;
    background-color: darken($c-body-bg, 7);
  }
}



// == DEVELOPMENT == //

// @TODO: breakpoints
